1.

open source: github.com/kubernetes	google, go	2014
automate deploy, scaling, manage
comutation with docker

service descovery and load balancer
storage orchestration
automated rollouts and rollback
automatic bin packing
self-healing
secret and config mgmt

cluster - nodes (master (mgmt), worker(for containers))
cmd - master - workers

master: kube controller, cloud controller -> cloud,
etcd (DB) <-> kube api server <- kube sheduller
					|
kubelet,	kubelet, ...
kubeproxy,	kubeproxy, ...
	kubenodes

...	

2. local - minikube:

install vbox or hyper-v

minikube version

minikube start
minikube stop
minikube delete

minikube ssh
minikube start --cpus=4 --memory=8gb --disk-size=5gb
minikube start --cpus=2 --memory=6000mb --disk-size=4000mb
minikube start -p MYSUPERCLUSTER

# minikube start -p CLUSTER_NAME --cpus=# (cpu count) --memory=# (memory size gb/mb) --disk-size=# (hdd size gb/mb)

kubectl version
kubectl version client
kubectl get componentstatuses
kubectl cluster-info
kubectl get nodes

minikube: root:
docker: tcuser

docker images

files:
C:\Users\%USERNAME%\.kube		# kubectl & k8s cluster cfgs
C:\Users\%USERNAME%\.minikube	# minikube files (iso,...)

______

3. aws:

eksctl create cluster -f mycluster.yaml # to create & run k8s cluster from cfg file
eksctl delete cluster -f mycluster.yaml # to create & run k8s cluster from cfg file

apiVeersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
	name: some_kluster_name
	region: us-west-2 # for example

# vpc:
# 	subnets:
# 		private:
# 			us-west-2a: { id: subnet- }
# 			us-west-2b: { id: subnet- }
# 			us-west-2c: { id: subnet- }

nodeGroups:
	-	name			: worker-nodes-group-1
		instanceType	: m5.large # for example
		desiredCapacity	: 2 # for example
	-	name			: worker-nodes-group-2
		instanceType	: m5.large
		desiredCapacity	: 2
		

kubectl get nodes # to view result
~/.kube/config # cfg location

______

4. gcp:

install: google cloud sdk (to create cluster), kubectl (for manage cluster)

gcloud version
gcloud init
gcloud services enable container.googleapis.com

gcloud container clusters create cluster_name
gcloud container clusters create cluster_name --num-nodes=2 # --* optional
gcloud container clusters get-credentials cluster_name # kubectl for cluster connecting/config and for switch to cluster_name
gcloud container clusters delete cluster_name

kubectl version --client
kubectl cluster-info
kubectl get nodes

______

5. free kubernets for edu and test:

labs.play-with-k8s.com # for use for 4 hours
add instance (4 instances available)
# see instruction for connect to and activate nodes
kubectl get nodes # to view on master (control plane) or remote
kubectl get nodes --show-lables
kubectl label node node2 node-role.kubernetes.io/worker= # to add label
...

6. docker:

1. php app create
2. docker file create: appache, php, php app
3. docker image from docker file create
4. dockerhub repository create
5. upload docker image to dockerhub
6. docker image on dockerhub testing

vim index.php

<?php

$ip_server = $_SERVER['SERVER_ADDR'];

echo "<h1>Hello from Vanara Kuberntes for ADV-IT practice!"</h1><br>";
echo "Server IP address is: $ip_server", "<br><p>";
echo "Made by <font color=blue>Vanara Sugriva";

?>

vim Dockerfile:

FROM amazonlinux

RUN yum -y update
RUN yum -y install httpd
RUN yum -y install php

COPY ./index.php /var/www/html/index.php

CMD ["/usr/sbin/httpd","-D","FOREGROUND"]

EXPOSE 80


docker build -t vsk8sapp . # create DockerImage with local Ð’ockerfile

docker images # show local DockerImages

hub.docker.com/repository
create ... k8s

docker tag vsk8sapp:latest vanara/k8s:latest # DockerImage rename
docker login # to DockerHub

docker push vanara/k8s:latest # DockerImage to Repo

docker rmi XXXXXXXX -f # delete local DockerImage with ID
docker run -it -p 1234:80 vanara/k8s:latest # run container on port 1234 with remote DockerImage on port 80 open interactive

07. cubernetes. objects:
Main:
0. Container (not k8s obj)
1. Pod (Containers)
2. Deployment (Pods)
3. Service (Pods in Deployments)
4. Nodes (Servers)
5. Cluster (Servers)

+ DeamonSets, StatefulSets, ReplicaSets, Secrets, PV, SVC, LoadBalancers, ConfigMaps, Vertical Pod Autoscaler, Horizont Pod Autoscaler, ...

08. 

kubectl get nodes
kubectl get pods
kubectl run zdrava --generator=run-pod/v1 --image=httpd:latest --port=80 #(any docker image)

kubectl delete pods zdrava
kubectl describe pods zdrava
kubectl describe pods
kubectl describe nodes
...
kubectl exec [pod_name] date # for cmd exec (date, for example)
kubectl exec -it [pod_name] sh # for exec cmd interactive - foreground - fg

kubectl logs [pod_name]
kubectl port-forward [pod_name] 7788:80 # port forwarding local:remote - fg

# for create pod from file

vim vs_web-ver1.yaml

apiVersion : v1
kind: Pod
metadata:
  name: zdrava
spec:
  containers:
    - name : container-apache # for example
	  image: httpd:latest # for example
:wq

# no tab in yaml

kubectl apply -f vs_web-ver1.yaml # to run create

vim vs_web-ver1.yaml # to add port under image:
      ports:
        - containerPort: 80

kubectl delete -f vs_web-ver1.yaml
kubectl apply -f vs_web-ver1.yaml
		  
#       image: httpd:latest can change with no delete/apply - just apply

vim vs_web-ver2.yaml

apiVersion : v1
kind: Pod
metadata:
  name   : zdrava
  labels :
    env  : prod
    app  : main
    tier : frontend
    owner: VanaraSugriva
spec:
  containers:
    - name : container-apache
      image: nginx:latest
      ports:
        - containerPort: 80

vim pod-app.yaml

apiVersion : v1
kind: Pod
metadata:
  name   : vs-app
  labels :
    env  : prod
    app  : main
    tier : frontend
    owner: VanaraSugriva
spec:
  containers:
    - name : container-web
      image: nginx:latest
      ports:
        - containerPort: 80

    - name : container-api
      image: tomcat:8.5.38
      ports:
        - containerPort: 8080













